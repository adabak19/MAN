@page "/dashboard"
@using System.Security.Claims
@using MAN.Shared.Interfaces
@inject IBookReadService BookReadService
@inject IBookService BookService
@inject IProfileService ProfileService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider CustomAuthProvider

<h3>Dashboard</h3>

<AuthorizeView>
    <NotAuthorized>
        <h3>You must be Admin admin to access this page.</h3>
    </NotAuthorized>
    <Authorized>
        @if (isLoading)
        {
            <p>Loading data...</p>
        }
        else
        {
            <div class="dashboard-container">
                <div class="dashboard-card" @onclick="NavigateToActiveLoans">
                    <h4>Active Loans</h4>
                    <p>@activeLoansCount</p>
                </div>
                <div class="dashboard-card" @onclick="NavigateToBooks">
                    <h4>Books</h4>
                    <p>@booksCount</p>
                </div>
                <div class="dashboard-card" @onclick="NavigateToUsers">
                    <h4>Users</h4>
                    <p>@usersCount</p>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private int activeLoansCount = 0;
    private int booksCount = 0;
    private int usersCount = 0;
    private bool isLoading = true;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the authentication state
            var authState = await CustomAuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Ensure the user is authenticated
            if (user.Identity.IsAuthenticated)
            {
                // Check if the user has the "Admin" role
                isAdmin = user.Claims.Any(claim => claim.Type == ClaimTypes.Role && claim.Value == "Admin");

                
                    // Load the dashboard data
                    isLoading = true;
                    activeLoansCount = (await BookReadService.GetAllReading()).Count;
                    booksCount = (await BookService.GetAllAsync()).Count;
                    usersCount = (await ProfileService.GetAllAsync()).Count;
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
        

    }

    private void NavigateToActiveLoans() => Navigation.NavigateTo("/activeLoans");
    private void NavigateToBooks() => Navigation.NavigateTo("/adminBook");
    private void NavigateToUsers() => Navigation.NavigateTo("/adminUsers");
}
