@page "/borrowButton"
@using MAN.Shared.Interfaces;
@using MAN.Shared.DTO;
@using MAN.Shared.Models;
@inject IBookService BookService
@inject IBookReadService BookReadService
@inject AuthenticationStateProvider CustomAuthProvider
@inject IProfileService ProfileService
@rendermode InteractiveServer

@if (BookDto != null && bookRead == null && BookDto.Amount > 0)
{
    <button @onclick="BorrowBook">Borrow This Book</button>
}
else if (bookRead != null && bookRead.DateStarted != null && bookRead.DateFinished == null)
{
    <p>You currently have this book</p>
}
else
{
    <p>  </p>
}

@code {
    @* private BookDto? book; *@
    private Profile? profile;
    private BookRead? bookRead;
    @* [Parameter]
    public int Id {get; set;} *@

    [Parameter]
    public string? Username { get; set; }
    [Parameter]
    public BookDto? BookDto {get; set;}

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(Username))
            {
                Console.WriteLine("Username is null or empty.");
                return;
            }

            //

            profile = await ProfileService.GetAsyncByUsername(Username);
            if (profile == null)
            {
                Console.WriteLine("Profile not found.");
                return;
            }

            bookRead = await BookReadService.GetAsyncById(profile.Id, BookDto.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task BorrowBook()
    {
        if (BookDto == null || profile == null)
        {
            Console.WriteLine("Cannot borrow book: Book or Profile is null.");
            return;
        }

        if (BookDto.Amount <= 0)
        {
            Console.WriteLine("Cannot borrow book: No copies available.");
            return;
        }

        try
        {
            var newBookRead = new BookRead
            {
                ProfileId = profile.Id,
                BookId = BookDto.Id,
                Rating = null,
                Review = null,
                DateStarted = DateOnly.FromDateTime(DateTime.Now),
                DateFinished = null,
                Status = "reading"
            };

            var updatedBook = new BookDto
            {
                Id = BookDto.Id,
                ISBN = BookDto.ISBN,
                Title = BookDto.Title,
                AuthorName = BookDto.AuthorName,
                Publisher = BookDto.Publisher,
                PageCount = BookDto.PageCount,
                YearPublished = BookDto.YearPublished,
                Genres = BookDto.Genres,
                CoAuthors = BookDto.CoAuthors,
                Amount = BookDto.Amount - 1
            };

            await BookService.Update(updatedBook);
            await BookReadService.Add(newBookRead);

            // Refresh the state after changes
            @* book = await BookService.GetAsyncById(Id); *@
            bookRead = await BookReadService.GetAsyncById(profile.Id, BookDto.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during borrowing process: {ex.Message}");
        }
    }
}