@page "/activeLoans"
@using MAN.Shared.Interfaces
@using MAN.Shared.DTO
@inject IBookReadService BookReadService

@using System.Security.Claims
@inject AuthenticationStateProvider CustomAuthProvider

@rendermode InteractiveServer

<h3>Admin Dashboard</h3>

<AuthorizeView>
    <NotAuthorized>
        <h3>You must be Admin admin to access this page.</h3>
    </NotAuthorized>
    <Authorized>

@if (bookReads == null)
{
    <p>Loading...</p>
}
else if (bookReads.Count == 0)
{
    <p>No book reads found.</p>
}
else
{
    <div class="book-reads">
        <h4>Active loans</h4>
        @foreach (var bookRead in bookReads)
        {
            <div class="loan-item">
                @if (editingLoan == bookRead)
                {
                    <div class="edit-dialog">
                        <h4>Edit Loan</h4>
                        <p><strong>User:</strong> @editingLoan.ReviewerName</p>
                        <p><strong>Book:</strong> @editingLoan.BookTitle</p>
                        <label for="status">Status:</label>
                        <select id="status" @bind="editingLoan.Status">
                            <option value="reading">Reading</option>
                            <option value="read">Read</option>
                        </select>
                        <button @onclick="SaveChanges">Save</button>
                        <button @onclick="CancelEdit">Cancel</button>
                    </div>
                }
                else
                {
                    <LoanComponent loan="@bookRead" OnEdit="HandleEdit" />
                }
            </div>
        }
    </div>
}
    </Authorized>
</AuthorizeView>

@code {
    private List<BookReadDto>? bookReads;
    private BookReadDto? editingLoan;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {   // Fetch the authentication state
            var authState = await CustomAuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Ensure the user is authenticated
            if (user.Identity.IsAuthenticated)
            {
                // Check if the user has the "Admin" role
                isAdmin = user.Claims.Any(claim => claim.Type == ClaimTypes.Role && claim.Value == "Admin");}
            // Fetch all active loans
            bookReads = await BookReadService.GetAllReading();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void HandleEdit(BookReadDto loan)
    {
        editingLoan = loan;
    }

    private async Task SaveChanges()
    {
        if (editingLoan != null)
        {
            try
            {
                await BookReadService.UpdateFromDto(editingLoan);
                editingLoan = null;
                bookReads = await BookReadService.GetAllReading();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving changes: {ex.Message}");
            }
        }
    }

    private void CancelEdit()
    {
        editingLoan = null;
    }
}
