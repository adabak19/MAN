@page "/myBooks"
@using MAN.Shared.Interfaces;
@using MAN.Shared.DTO;
@using MAN.Shared.Models;
@inject IBookService BookService
@inject IBookReadService BookReadService
@inject IProfileService ProfileService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider CustomAuthProvider
@rendermode InteractiveServer
 
<AuthorizeView>
    <NotAuthorized>
        <h3>You have to be logged in to see this page</h3>
    </NotAuthorized>
    <Authorized>
<h3>My Books</h3>
 
<BookSearch OnSearchResultsChanged="HandleSearchResults" IsForMyBooks="true" ProfileId="@profile?.Id" />

        @if (filteredBookReads == null)
        {
            <p><em></em></p>
            <p><em></em></p>
        }
        else if (!filteredBookReads.Any())
        else if (!filteredBookReads.Any())
        {
            <p><em> </em></p>
        }
        else
        {
            <div class="book-container">
                @foreach (var (bookRead, book) in filteredBookReads)
                @foreach (var (bookRead, book) in filteredBookReads)
                {
                    <BookComponent BookDto="book" Username="@Username" NavigateTo="@($"/singleBook/{book.Id}")">
                    </BookComponent>
                    <BookComponent BookDto="book" Username="@Username" NavigateTo="@($"/singleBook/{book.Id}")">
                    </BookComponent>
                }
            </div>
        }

  
@if (booksWithStatus == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Current books</h1>
    <div class="book-container">
        @foreach (var (bookRead, bookDto) in booksWithStatus)
    {
        @if (bookRead.Status == "to-read")
        {
            <BookComponent BookDto="bookDto" Username="@Username" NavigateTo="@($"/singleBook/{bookDto.Id}")">
                    </BookComponent>
        }
    }
        @foreach (var (bookRead, bookDto) in booksWithStatus)
    {
        @if (bookRead.Status == "to-read")
        {
            <BookComponent BookDto="bookDto" Username="@Username" NavigateTo="@($"/singleBook/{bookDto.Id}")">
                    </BookComponent>
        }
    }
    </div>
       
        <h1>Books to read</h1>
        <div class="book-container">
        @foreach (var (bookRead, bookDto) in booksWithStatus)
    {
        @if (bookRead.Status == "to-read")
        {
            <BookComponent BookDto="bookDto" Username="@Username" NavigateTo="@($"/singleBook/{bookDto.Id}")">
                    </BookComponent>
        }
    }
        @foreach (var (bookRead, bookDto) in booksWithStatus)
    {
        @if (bookRead.Status == "to-read")
        {
            <BookComponent BookDto="bookDto" Username="@Username" NavigateTo="@($"/singleBook/{bookDto.Id}")">
                    </BookComponent>
        }
    }
        </div>
        <h1>Books you already read</h1>
        <div class="book-container">
        @foreach (var (bookRead, bookDto) in booksWithStatus)
    {
        @if (bookRead.Status == "to-read")
        {
            <BookComponent BookDto="bookDto" Username="@Username" NavigateTo="@($"/singleBook/{bookDto.Id}")">
                    </BookComponent>
        }
    }
        @foreach (var (bookRead, bookDto) in booksWithStatus)
    {
        @if (bookRead.Status == "to-read")
        {
            <BookComponent BookDto="bookDto" Username="@Username" NavigateTo="@($"/singleBook/{bookDto.Id}")">
                    </BookComponent>
        }
    }
        </div>
}
</Authorized>
@code {
    private List<(BookReadDto bookRead, BookDto bookDto)>? booksWithStatus;
    private List<(BookReadDto bookRead, BookDto bookDto)>? booksWithStatus;
    private List<BookDto>? books = new();
     @* private List<BookDto>? books; *@
    private List<BookReadDto>? bookReads;
    private List<(BookReadDto bookRead, BookDto bookDto)>? filteredBookReads;
    private List<(BookReadDto bookRead, BookDto bookDto)>? filteredBookReads;
    private Profile? profile;
    [Parameter]
    public string? Username { get; set; }
    public string? Review {get; set;}
 
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await CustomAuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;
 
            if (user.Identity.IsAuthenticated)
            {
                Username = user.Claims.First(claim => claim.Type.Equals("Username")).Value;
            }
            profile = await ProfileService.GetAsyncByUsername(Username);
            if (profile == null)
            {
                Console.WriteLine("Profile not found.");
            }
            Console.WriteLine($"ProfileId: {profile?.Id}");

            bookReads = await BookReadService.GetAsyncByProfileId(profile.Id);
            if (bookReads == null)
            {
                Console.WriteLine("BookRead not found.");
            }
            booksWithStatus = new List<(BookReadDto, BookDto)>();

            foreach (var bookRead in bookReads)
            {
                BookDto? bookDto = await BookService.GetAsyncById(bookRead.BookId);
                if (bookDto != null)
                {
                    booksWithStatus.Add((bookRead, bookDto));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

     private async void HandleSearchResults(List<BookDto> searchResults)
    {
        books = searchResults;
        filteredBookReads = new List<(BookReadDto, BookDto)>();
        foreach (var book in books)
            {
                BookRead? bookRead1 = await BookReadService.GetAsyncById(profile.Id, book.Id);
                if (bookRead1 != null)
                {
                    BookReadDto bookReadDto = new(){
                        BookId = bookRead1.BookId,
                        ProfileId = bookRead1.ProfileId,
                        BookTitle = bookRead1.Book?.Title,
                        AuthorName = bookRead1.Book?.Author?.MiddleName == null ? $"{bookRead1.Book?.Author?.FirstName} {bookRead1.Book?.Author?.LastName}" : $"{bookRead1.Book?.Author?.FirstName} {bookRead1.Book?.Author?.MiddleName} {bookRead1.Book?.Author?.LastName}",
                        ReviewerName = bookRead1.Profile != null ? $"{bookRead1.Profile.FirstName} {bookRead1.Profile.LastName}" : null,
                        Rating = bookRead1.Rating,
                        Review = bookRead1.Review,
                        DateFinished = bookRead1.DateFinished,
                        DateStarted = bookRead1.DateStarted,
                        Status = bookRead1.Status
                    };
                    filteredBookReads.Add((bookReadDto, book));
                }
            }
        StateHasChanged(); 
    }
}
</AuthorizeView>
 
 