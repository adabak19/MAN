@* @page "/addBook"
@using MAN.Shared.Interfaces
@using MAN.Shared.Models
@using Microsoft.AspNetCore.Components
@inject IBookService BookService
@inject IGenreService GenreService
@inject IAuthorService AuthorService
@inject IPublisherService PublisherService
@inject IBindingTypeService BindingTypeService
@inject NavigationManager Navigation

<h3>Add New Book</h3>

@if (addingBook == null)
{
    <p>Loading...</p>
}
else
{
    <div class="add-book-form">
        <label for="isbn">ISBN:</label>
        <input id="isbn" @bind="addingBook.ISBN" />

        <label for="title">Title:</label>
        <input id="title" @bind="addingBook.Title" />

        <label for="pageCount">Page Count:</label>
        <input id="pageCount" type="number" @bind="addingBook.PageCount" />

        <label for="yearPublished">Year Published:</label>
        <input id="yearPublished" type="number" @bind="addingBook.YearPublished" />

        <label for="amount">Amount:</label>
        <input id="amount" type="number" @bind="addingBook.Amount" />

        <label for="author">Author:</label>
        <select id="author" @bind="addingBook.AuthorId">
            <option value="0">-- Select Author --</option>
            @foreach (var author in authors)
            {
                <option value="@author.Id">@author.FirstName @author.LastName</option>
            }
        </select>

        <label for="publisher">Publisher:</label>
        <select id="publisher" @bind="addingBook.PublisherId">
            <option value="0">-- Select Publisher --</option>
            @foreach (var publisher in publishers)
            {
                <option value="@publisher.Id">@publisher.PublisherName</option>
            }
        </select>

        <label for="bindingType">Binding Type:</label>
        <select id="bindingType" @bind="addingBook.BindingTypeId">
            <option value="0">-- Select Binding Type --</option>
            @foreach (var bindingType in bindingTypes)
            {
                <option value="@bindingType.Id">@bindingType.Type</option>
            }
        </select>

        <button @onclick="SaveBook">Save</button>
        <button @onclick="Cancel">Cancel</button>
    </div>
}

@code {
    private Book? addingBook;
    private List<Author> authors = new();
    private List<Genre> genres = new();
    private List<Publisher> publishers = new();
    private List<BindingType> bindingTypes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            addingBook = new Book
            {
                Id = 0,
                ISBN = string.Empty,
                Title = string.Empty,
                PageCount = 0,
                YearPublished = 0,
                BindingTypeId = 0,
                PublisherId = 0,
                AuthorId = 0,
                Amount = 0,
                BindingType = new BindingType
                {
                    Id = 0,
                    Type = string.Empty,
                    Books = new List<Book>()
                },
                Publisher = new Publisher
                {
                    Id = 0,
                    PublisherName = string.Empty
                },
                Author = new Author
                {
                    Id = 0,
                    FirstName = string.Empty,
                    MiddleName = string.Empty,
                    LastName = string.Empty,
                    Books = new List<Book>(),
                    Coauthors = new List<CoAuthors>()
                },
                BookGenres = new List<BookGenre>(),
                BookReads = new List<BookRead>(),
                Coauthors = new List<CoAuthors>()
            };

            authors = await AuthorService.GetAllAuthors();
            genres = await GenreService.GetAllAsync();
            publishers = await PublisherService.GetAllAsync();
            bindingTypes = await BindingTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing add book page: {ex.Message}");
        }
    }

    private async Task SaveBook()
    {
        try
        {
            await BookService.Add(addingBook);
            Navigation.NavigateTo("/adminBook");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving book: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/adminBook");
    }
} *@
