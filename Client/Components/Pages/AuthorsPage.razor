@page "/authors"
@using MAN.Shared.Interfaces;
@using MAN.Shared.Models;
@using MAN.Shared.DTO;
@inject IAuthorService AuthorService
@rendermode InteractiveServer
<h3>Authors</h3>

<div class="search-container">
    <input 
        @bind="searchName"
        @bind:event="oninput"
        @onkeyup ="HandleKeyPress"
        placeholder="Search by Name" />
        <button @onclick="PerformSearch">Search</button>
</div>
@if (authors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="book-container">
    @foreach (var author in authors)
    {
        <AuthorComponent Author="author" NavigateTo="@($"/singleAuthor/{author.Id}")" />
    }
    </div>
}

<button @onclick="AddAuthor">Add New Author</button>

@code {
    private List<AuthorDto>? authors;
    private string? searchName;

    protected override async Task OnInitializedAsync()
    {
        // Load all authors when the page is initialized
        authors = await AuthorService.GetAllAsync();
    }

    private async Task AddAuthor()
    {
        var newAuthor = new Author
            {
                FirstName = "John",
                LastName = "Doe",
            };

        await AuthorService.Add(newAuthor);

        // Refresh the list of authors after adding a new one
        authors = await AuthorService.GetAllAsync();
    }
    private async Task PerformSearch()
    {
        authors = await AuthorService.SearchAuthorsAsync(searchName);
    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key != "Tab")
        {
            await PerformSearch();
        }
    }
}