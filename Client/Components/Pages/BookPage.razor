@page "/books"
@using MAN.Shared.Interfaces;
@using MAN.Shared.DTO;
@using MAN.Shared.Models;
@inject IBookService BookService;
@inject AuthenticationStateProvider CustomAuthProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Books</h3>
<BookSearch OnSearchResultsChanged="HandleSearchResults" IsForMyBooks="false" />


@if (books == null)
{
    <p><em>Loading...</em></p>
}
else if (!books.Any())
{
    <p><em>No books found.</em></p>
}
else
{
    <div class="book-container">
        @foreach (var book in PagedBooks)
        {
            <BookComponent BookDto="book" Username="@Username" NavigateTo="@($"/singleBook/{book.Id}")">
            </BookComponent>
        }
    </div>
    
    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>
}
@* 
<button @onclick="AddBook">Add New Book</button> *@

@code {
    
private List<BookDto>? books;
    public string? Username {get; set;}
    
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 24;



    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAllAsync();
        var authState = await CustomAuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Username = user.Claims.First(claim => claim.Type.Equals("Username")).Value;
        }
    }

private void HandleSearchResults(List<BookDto> searchResults)
    {
        books = searchResults;
        CurrentPage = 1;
    }

    
    private IEnumerable<BookDto> PagedBooks => books
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);

    private int TotalPages => (int)Math.Ceiling((double)(books?.Count ?? 0) / PageSize);

    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
        }
    }

@* 
    private async Task AddBook()
    {
        var newBook = new Book
            {
                Id = 3,
                ISBN = "1243242",
                Title = "Book2",
                PageCount = 120,
                YearPublished = 1929,
                BindingTypeId = 3,
                PublisherId = 2,
                AuthorId = 3,
                Amount = 4
            };

        await BookService.Add(newBook);
        books = await BookService.GetAllAsync();
    } *@
}
 

