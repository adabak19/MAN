@page "/books"
@using MAN.Shared.Interfaces;
@using MAN.Shared.DTO;
@using MAN.Shared.Models;
@inject IBookService BookService;
@inject AuthenticationStateProvider CustomAuthProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Books</h3>
<BookSearch OnSearchResultsChanged="HandleSearchResults" IsForMyBooks="false" />
@* <div>
    <input 
        @bind="searchTitle" 
        @onkeyup="HandleKeyPress" 
        placeholder="Search by Title" />

    <input @bind="searchAuthor" @onkeyup="HandleKeyPress" placeholder="Search by Author" />

    <input @bind="searchGenre" @onkeyup="HandleKeyPress" placeholder="Search by Genre" />

    <button @onclick="SearchBooks">Search</button>
</div> *@

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else if (!books.Any())
{
    <p><em>No books found.</em></p>
}
else
{
    <div class="book-container">
        @foreach (var book in books)
        {
            <div class="book-item">
                <a href="/singleBook/@book.Id">
                    <h4>@book.Title</h4>
                    <p><strong>Author:</strong> @book.AuthorName</p>
                    <p><strong>Publisher:</strong> @book.Publisher</p>
                </a>
            </div>
            <a href="/singleBook/@book.Id">
            <BookComponent Id="book.Id" Username="@Username" />
            </a>
        }
    </div>
}

<button @onclick="AddBook">Add New Book</button>

@code {
    
    @* private string? searchTitle;
    private string? searchAuthor;
    private string? searchGenre; *@
private List<BookDto>? books;
    public string? Username {get; set;}

    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAllAsync();
        var authState = await CustomAuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Username = user.Claims.First(claim => claim.Type.Equals("Username")).Value;
        }
    }

    @* private async Task SearchBooks()
    {
        books = await BookService.SearchBooksAsync(searchTitle, searchAuthor, searchGenre);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchBooks();
        }
    } *@


private void HandleSearchResults(List<BookDto> searchResults)
    {
        books = searchResults;
    }

    private async Task AddBook()
    {
        var newBook = new Book
            {
                Id = 3,
                ISBN = "1243242",
                Title = "Book2",
                PageCount = 120,
                YearPublished = 1929,
                BindingTypeId = 3,
                PublisherId = 2,
                AuthorId = 3,
                Amount = 4
            };

        await BookService.Add(newBook);
        books = await BookService.GetAllAsync();
    }
}

 

