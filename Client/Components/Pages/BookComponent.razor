@page "/bookComponent"
@using MAN.Shared.Interfaces;
@using MAN.Shared.DTO;
@using MAN.Shared.Models;
@inject IBookService BookService
@inject IBookReadService BookReadService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider CustomAuthProvider
@inject IProfileService ProfileService
@rendermode InteractiveServer

@if (BookDto == null)
{
    <p>loading...</p>
}
else
{
    <div @onclick="Navigate" class="book-item">
        <ul>
            <li><strong>Title:</strong> @BookDto.Title</li>
            <li><strong>Author:</strong> @BookDto.AuthorName</li>
            <li><strong>Available copies:</strong> @BookDto.Amount</li>
        </ul>    
    </div>
}

@code {
    //private BookDto? book;
    private Profile? profile;
    private BookRead? bookRead;

    [Parameter]
    public string? Username { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string? NavigateTo { get; set; }
    [Parameter]
    public BookDto? BookDto {get; set;} 

    protected override async Task OnInitializedAsync()
    {
        try
        {

            profile = await ProfileService.GetAsyncByUsername(Username);

            bookRead = await BookReadService.GetAsyncById(profile.Id, BookDto.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
    private void Navigate()
    {
        if (!string.IsNullOrEmpty(NavigateTo))
        {
            Navigation.NavigateTo(NavigateTo);
        }
    }

    public async Task RefreshBook()
    {
        bookRead = await BookReadService.GetAsyncById(profile.Id, BookDto.Id);
        StateHasChanged(); // Update the UI
    }
}